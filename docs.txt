 AbuseIPDB Checker Plugin Documentation

 Project Overview

The AbuseIPDB Checker is a production-ready OPNsense plugin that provides automated threat detection by monitoring external IP addresses attempting to connect to your internal network and checking them against the AbuseIPDB reputation database. The plugin features a sophisticated modular architecture, real-time alias management, and comprehensive web interface.

 Architecture Overview

 1. Modular Python Backend Architecture
The plugin implements a compartmentalized design with separate modules for better maintainability, debugging, and error isolation:

Core Library Structure (`src/opnsense/scripts/AbuseIPDBChecker/lib/`):
- `core_utils.py` - Timezone handling, logging, directory management, threat classification
- `config_manager.py` - Configuration reading, validation, and management
- `database.py` - SQLite database operations with connection management
- `api_client.py` - AbuseIPDB API client with rate limiting and error handling
- `log_parser.py` - Firewall log parsing and IP extraction
- `statistics.py` - Statistics collection, reporting, and data export
- `daemon.py` - Daemon operations, batch processing, and automated updates
- `__init__.py` - Module initialization and dependency management

Main Orchestrator:
- `checker.py` - Primary entry point that coordinates all operations

Alias Management:
- `manage_alias.py` - REST API-based alias management system

 2. MVC Framework Integration

Model (`src/opnsense/mvc/app/models/OPNsense/AbuseIPDBChecker/`):
- `AbuseIPDBChecker.xml` - Configuration schema with validation rules
- `AbuseIPDBChecker.php` - Model class extending BaseModel
- `Menu/Menu.xml` - Service menu integration
- `ACL/ACL.xml` - Access control definitions

Controllers (`src/opnsense/mvc/app/controllers/OPNsense/AbuseIPDBChecker/`):
- `IndexController.php` - Main web interface controller
- `Api/ServiceController.php` - Service management API endpoints
- `Api/SettingsController.php` - Configuration management endpoints
- `Api/routes.php` - API routing configuration

Views (`src/opnsense/mvc/app/views/OPNsense/AbuseIPDBChecker/`):
- `index.volt` - Multi-tab web interface with real-time updates

Forms (`src/opnsense/mvc/app/controllers/OPNsense/AbuseIPDBChecker/forms/`):
- `general.xml` - General settings form
- `network.xml` - Network configuration form
- `api.xml` - API settings form
- `alias.xml` - Alias management form

 3. Service Integration Framework

Service Management:
- `src/etc/rc.d/abuseipdbchecker` - RC script with daemon management
- `src/etc/inc/plugins.inc.d/abuseipdbchecker.inc` - Plugin registration
- `src/opnsense/service/conf/actions.d/actions_abuseipdbchecker.conf` - Configd actions

Configuration Templates:
- `src/opnsense/service/templates/OPNsense/AbuseIPDBChecker/` - Template system
- `+TARGETS` - Template deployment targets
- `abuseipdbchecker.conf` - Configuration file template

 4. Database Architecture

SQLite Database (`/var/db/abuseipdbchecker/abuseipdb.db`):

Tables:
- `checked_ips` - All checked IPs with three-tier classification
  - `ip` (PRIMARY KEY)
  - `first_seen`, `last_checked`
  - `check_count`
  - `threat_level` (0=Safe, 1=Suspicious, 2=Malicious)
  - `country`

- `threats` - Detailed threat information
  - `ip` (PRIMARY KEY, FOREIGN KEY)
  - `abuse_score`, `reports`
  - `last_seen`, `categories`
  - `country`, `threat_level`

- `stats` - System statistics
  - `key`, `value` pairs for tracking usage

Migration Support: Automatic schema updates with backward compatibility

 5. Three-Tier Threat Classification System

Classification Levels:
- Level 0 (Safe): Score < Suspicious Threshold (default: 40%)
- Level 1 (Suspicious): Score ≥ Suspicious Threshold, < Malicious Threshold (default: 40-69%)
- Level 2 (Malicious): Score ≥ Malicious Threshold (default: ≥70%)

Configurable Thresholds: Administrators can adjust thresholds based on security requirements

Alias Integration: Option to include suspicious IPs in firewall aliases

 6. Advanced Web Interface

Multi-Tab Design:

Configuration Tabs:
- General: Core settings, thresholds, OPNsense API credentials
- Network: LAN subnet definitions, protocol filtering
- API: AbuseIPDB API configuration, rate limits
- Alias: Automatic alias management settings
- Test IP: Manual IP testing interface

Monitoring Tabs:
- Statistics: Real-time usage statistics with breakdown
- External IPs: Live view of detected external IPs from firewall logs
- All Scanned IPs: Complete database with three-tier classification
- Recent Threats: Malicious IP detections with details
- Logs: Real-time log viewer with filtering

Real-Time Features:
- Automatic refresh capabilities
- Live service status monitoring
- Interactive IP testing
- Country flag display with fallback handling

 7. Daemon Mode & Batch Processing

Daemon Architecture:
- Continuous Monitoring: Polls firewall logs every 2.5 seconds
- Batch Collection: Collects unique IPs over 15-second intervals
- Intelligent Processing: Filters IPs based on check frequency and daily limits
- Automatic Alias Updates: Updates firewall aliases when threats detected

Batch Processing Features:
- Rate Limiting: Respects AbuseIPDB API limits
- Daily Quotas: Configurable daily check limits
- Smart Filtering: Avoids redundant checks based on configuration
- Error Recovery: Graceful handling of API failures

 8. REST API-Based Alias Management

Modern Approach: Uses OPNsense REST API instead of direct configuration manipulation

Alias Features:
- Automatic Creation: Creates "MaliciousIPs" alias automatically
- Dynamic Updates: Real-time updates when threats detected
- Configurable Scope: Include suspicious IPs optionally
- Size Limits: Configurable maximum hosts (default: 500)
- Priority Sorting: Orders by abuse score and detection time

API Endpoints:
- `/api/firewall/alias/` - Standard OPNsense alias management
- Authentication via API key/secret pairs

 9. Comprehensive API Endpoints

Service Controller (`/api/abuseipdbchecker/service/`):
- `status` - Service status and PID information
- `start/stop/restart` - Service lifecycle management
- `run` - Manual check execution
- `stats` - Usage statistics with breakdown
- `threats` - Recent threat detections
- `logs` - Real-time log retrieval with filtering
- `testip` - Single IP testing with full details
- `listips` - External IP detection from firewall logs
- `allips` - Complete IP database with classification
- `batchstatus` - Daemon batch processing status
- `updatealias` - Manual alias updates
- `exportthreats` - Threat data export

Settings Controller (`/api/abuseipdbchecker/settings/`):
- `get` - Configuration retrieval
- `set` - Configuration updates with validation

 10. Advanced Logging & Monitoring

Structured Logging:
- Timezone-Aware: Proper local timezone handling
- Categorized Messages: Different log levels and categories
- Error Handling: Graceful degradation with fallback to syslog
- Log Rotation: Automatic log management

Real-Time Monitoring:
- Service Status: Live daemon monitoring
- API Usage: Daily quota tracking
- Threat Detection: Real-time threat notifications
- Performance Metrics: Processing statistics

 11. Security Features

Rate Limiting & Quotas:
- API Respect: 500ms minimum between requests
- Daily Limits: Configurable daily API usage
- Batch Processing: Efficient IP checking
- Error Handling: Graceful API failure recovery

Network Security:
- External-Only Monitoring: Only processes external→internal traffic
- Protocol Filtering: Configurable protocol exclusions
- Subnet Awareness: Intelligent LAN/WAN detection
- Connection Analysis: Detailed traffic flow analysis

 12. Configuration Management

Template System: Uses OPNsense's template engine for configuration generation

Default Configuration:
```ini
[general]
Enabled=0
LogFile=/var/log/filter/latest.log
CheckFrequency=7
SuspiciousThreshold=40
MaliciousThreshold=70
IgnoreBlockedConnections=1

[network]
LanSubnets=192.168.0.0/16,10.0.0.0/8,172.16.0.0/12
IgnoreProtocols=icmp,igmp

[api]
Key=YOUR_API_KEY
Endpoint=https://api.abuseipdb.com/api/v2/check
MaxAge=90
DailyCheckLimit=1000

[alias]
Enabled=1
IncludeSuspicious=0
MaxRecentHosts=500
```

Validation System: Comprehensive input validation with user-friendly error messages

 13. Installation & Deployment

Package Structure: Standard OPNsense plugin format
- Makefile: Package build configuration
- pkg-descr: Package description
- post_install.sh: Post-installation setup script

Automated Setup:
- Directory creation with proper permissions
- Service registration and startup configuration
- Database initialization with migration support
- Symlink creation for script accessibility

Dependencies: Python3, requests library, SQLite3 (built into OPNsense)

 14. Error Handling & Recovery

Modular Error Isolation: Each module handles its own errors gracefully

API Error Handling:
- Authentication failures with clear messages
- Rate limiting detection and backoff
- Connection timeouts with retries
- Invalid response handling

Database Error Recovery:
- Automatic schema migration
- Connection pooling with proper cleanup
- Transaction safety with rollback
- Corruption detection and repair

 15. Performance Optimization

Efficient Database Operations:
- Indexed queries for performance
- Connection reuse and pooling
- Batch operations where possible
- Statistics caching

Memory Management:
- Streaming log file reading
- Limited result sets
- Garbage collection awareness
- Resource cleanup

Network Optimization:
- Connection reuse for API calls
- Compression support where available
- Timeout management
- Retry logic with exponential backoff

 Integration Points

 Firewall Integration
- Log Analysis: Parses standard OPNsense filterlog format
- Alias System: Creates/updates firewall aliases automatically
- Rule Integration: Aliases can be used in any firewall rule

 Service Framework
- Plugin System: Full integration with OPNsense plugin architecture
- Menu System: Appears in Services menu
- ACL Integration: Proper permission management
- HA Sync: Supports High Availability synchronization

 API Integration
- REST API: Modern RESTful interface
- Authentication: Standard OPNsense API key/secret
- Error Handling: Comprehensive error responses
- Documentation: Self-documenting API structure