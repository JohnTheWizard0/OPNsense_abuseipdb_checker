# AbuseIPDB Checker Plugin Documentation

Project Overview

Production-ready OPNsense plugin for automated threat detection. Monitors external IP addresses attempting to connect to internal networks, checks them against AbuseIPDB reputation database, and provides comprehensive threat management.

Core Architecture

Modular Python Backend (`src/opnsense/scripts/AbuseIPDBChecker/lib/`)
- `core_utils.py` - Timezone handling, logging, threat classification, directory management
- `config_manager.py` - Configuration reading, validation, template integration
- `database.py` - SQLite operations with enhanced schema and IP management
- `api_client.py` - AbuseIPDB API client with rate limiting and error handling
- `log_parser.py` - Firewall log parsing with connection detail extraction
- `statistics.py` - Statistics, reporting, and data export
- `daemon.py` - Batch processing, automated updates, and alias management
- `__init__.py` - Module initialization and dependency management

Main Orchestrator
- `checker.py` - Primary entry point coordinating all operations
- `manage_alias.py` - REST API-based alias management

Database Schema (SQLite)

Tables
- `checked_ips` - All checked IPs with connection tracking
  - Core: `ip`, `first_seen`, `last_checked`, `check_count`
  - Classification: `threat_level` (0=Safe, 1=Suspicious, 2=Malicious)
  - Metadata: `country`, `connection_details`
  
- `threats` - Detailed threat information with management features
  - Threat Data: `abuse_score`, `reports`, `categories`, `last_seen`
  - Management: `marked_safe`, `marked_safe_date`, `marked_safe_by`
  
- `stats` - System statistics and usage tracking

Three-Tier Classification
- Level 0 (Safe): Score < Suspicious Threshold (default: 40%)
- Level 1 (Suspicious): Score ≥ 40%, < Malicious Threshold (default: 70%)
- Level 2 (Malicious): Score ≥ 70%

Web Interface

Configuration Tabs
- General: Core settings, thresholds, OPNsense API credentials
- Network: LAN subnet definitions, protocol filtering
- API: AbuseIPDB API configuration, rate limits
- Alias: Automatic alias management settings
- Test IP: Manual IP testing interface

Monitoring Tabs
- Statistics: Real-time usage metrics with threat breakdown
- External IPs: Live view of detected external IPs from firewall logs
- All Scanned IPs: Complete database with pagination, search, connection details
- Recent Threats: Malicious IP detections with management actions
- Logs: Real-time log viewer with filtering

Enhanced Features
- Pagination and search across all data views
- Connection detail tracking (source→destination with ports)
- IP management actions (mark safe, remove, unmark)
- Country flag display with fallback handling
- Real-time service status monitoring

Service Integration

OPNsense Framework
- RC Script: `/usr/local/etc/rc.d/abuseipdbchecker` - Daemon management
- Plugin Registration: `/usr/local/etc/inc/plugins.inc.d/abuseipdbchecker.inc`
- Configd Actions: `actions_abuseipdbchecker.conf` - Service control
- Menu Integration: Services menu with proper ACL

MVC Structure
- Models: Configuration schema with validation (`AbuseIPDBChecker.xml`)
- Controllers: API endpoints for service/settings management
- Views: Multi-tab interface with real-time updates
- Templates: Configuration file generation

API Endpoints

Service Controller (`/api/abuseipdbchecker/service/`)
- `status/start/stop/restart` - Service lifecycle management
- `stats` - Usage statistics with threat breakdown
- `threats` - Paginated threat list with search and management
- `allips` - Complete IP database with pagination
- `testip` - Single IP testing with full details
- `listips` - External IP detection from firewall logs
- `updatealias` - Manual alias updates
- `removeip/marksafe/unmarksafe` - IP management actions

Settings Controller (`/api/abuseipdbchecker/settings/`)
- `get/set` - Configuration management with validation

Daemon & Batch Processing

Operation Mode
- Continuous Monitoring: Polls firewall logs every 2.5 seconds
- Batch Collection: Collects unique IPs over 15-second intervals
- Intelligent Processing: Filters based on check frequency and daily limits
- Automatic Alias Updates: Updates firewall aliases when new threats detected

Connection Tracking
- Extracts source→destination connection details with ports
- Stores connection information in database for analysis
- Provides detailed connection views in web interface

REST API Alias Management

Modern Integration
- Uses OPNsense REST API instead of direct configuration manipulation
- Creates/updates "MaliciousIPs" alias automatically
- Configurable scope (include suspicious IPs optionally)
- Size limits with priority sorting by abuse score and detection time

Authentication
- Requires OPNsense API key/secret pairs
- Automatic creation and updates when threats detected

Configuration Template System

Default Configuration
```ini
[general]
LogFile=/var/log/filter/latest.log
CheckFrequency=7
SuspiciousThreshold=40
MaliciousThreshold=70
IgnoreBlockedConnections=1
ApiKey=<OPNsense API Key>
ApiSecret=<OPNsense API Secret>

[network]
LanSubnets=192.168.0.0/16,10.0.0.0/8,172.16.0.0/12
IgnoreProtocols=icmp,igmp

[api]
Key=YOUR_API_KEY
Endpoint=https://api.abuseipdb.com/api/v2/check
MaxAge=90
DailyCheckLimit=1000

[alias]
Enabled=1
IncludeSuspicious=0
MaxRecentHosts=500
```

Security & Error Handling

Rate Limiting
- 500ms minimum between API requests
- Configurable daily API usage limits
- Graceful API failure recovery with fallback to syslog

Network Security
- External-only monitoring (external→internal traffic)
- Protocol filtering with configurable exclusions
- Subnet-aware LAN/WAN detection

Validation
- Pre-startup configuration validation
- Input sanitization and IP format validation
- Comprehensive error logging with timezone awareness

Installation & Deployment

Package Structure
- Standard OPNsense plugin format with Makefile
- Automated post-installation setup script
- Service registration and database initialization
- Proper permissions and directory creation

Dependencies
- Python3, requests library, SQLite3 (built into OPNsense)
- No external dependencies beyond OPNsense base system

Key Integration Points

Firewall Integration
- Parses standard OPNsense filterlog format
- Creates/updates firewall aliases automatically
- Supports HA synchronization

Data Export
- JSON, CSV, and TXT export formats
- Threat data export with filtering options
- Statistics export for external monitoring

Development Notes

Code Organization
- Modular architecture prevents circular imports
- Each module handles specific functionality
- Proper error isolation and logging
- Consistent timezone handling throughout

Database Operations
- Connection pooling and proper cleanup
- Transaction safety with rollback capability
- Automatic schema migration support
- Efficient indexing for performance

Performance Optimization
- Streaming log file reading for large files
- Batch operations with configurable limits
- Memory-efficient data processing
- Connection reuse for API calls